- Udemy Tutorial For below Concepts -> 
  https://www.udemy.com/learn-python-and-ethical-hacking-from-scratch/learn/v4/t/lecture/9194564?start=0
  
- Snapshots allow u to save the state of the virtual machine, So we can use it as bookmarks to go back and forward to different 
  configurations in future
  To create a snapshot in oracle VM Virtual Manager right click on the machine and select the option snapshot
  
- print("String to Print on Console") and print "String to Print"   // both gives same output 
 
- In the 'opt' directory of linux machine u r supposed to put all ur optional programs such as pycharm editor could be put in
   this directory 

- MAC(Media Access Control) address is permanent, physical and unique address which is assigned to network interfaces by 
  manufacturer , IP address is used in the internet to identify computers and communicate between devices on the internet,
  while the MAC address is used within the network to identify devices and transfer data between devices.
  So each pack of data which is send within the network contains the source MAC and the destination MAC.
  
- Changing MAC address provides us ->
  - Anonymity
  - Impersonate other devices
  - Bypass filters
  - or connect to network which only specific devices and specific MAC addresses r allowed to connect
  
- use cmd -> ifconfig // to list interfaces on the current computer, interface here means a network card
- The interfaces created in virtual machines r virtual interfaces bcz we set this machine to use NAT network
  'lo' is the virtual interface created by linux, 'wlan0' is the external USB wireless adapter, 'ether' in the 'eth0' here
  represents the MAC address
  
- ifconfig eth0 down // to disable the interface
- ifconfig eth0 hw ether 00:11:22:33:44:55    // To change the MAC address to address -> 00:11:22:33:44:55
- ifconfig eth0 up    // to enable the interface

- always check the main python documentation for the module such as subprocess to know more functionalities of the module

- Variable Scopes ->
      
      my_name = 'ryu'       # Global Scope Variable
      
      def print_name():
        my_age = 8          # local scope variable
        print('Name is',my_name,my_age)   # here my_name and my_age both r accessible
        
      print_name()
      print('Name is',my_name,my_age) # here my_name is accessible but my_age is not accessible
      
      - Overwriting Variable
      
      my_name = 'ryu'       # Global Scope Variable
      
      def print_name():
        my_name = 'abc'          # overwriting global scope variable
        print('Name is',my_name)   # here o/p is abc
        
      print_name()
      print('Name is',my_name) # here o/p is ryu
      
      - to override variables globally
      
      my_name = 'ryu'       # Global Scope Variable
      
      def print_name():
        global my_name        # use global if u wants the variable to be override globally
        my_name = 'abc'          
        print('Name is',my_name)   # here o/p is abc
        
      print_name()
      print('Name is',my_name) # here o/p is abc
      
- to print the variable value with the string we can do as ->
  num = 3
  print('{} is the number').format(num)

- String Formating
   - print('num1 is {} and num2 is {}'.format(8,10)) then o/p is: num1 is 8 and num2 is 10
   - if we do: print('num1 is {1} and num2 is {0}'.format(8, 10)) then o/p is: num1 is 10 and num2 is 8 // here we have changed
     the indexing values of values passed in format() for the string in 'print' as now we are calling value of index 1 first
     and index 0 last
   - if we want to limit the character or no. for the output such as
    print('num1 is {0} and num2 is {1}'.format(8.342342423, 10.42342422)) //for this we want the only 3 digits value then we use
                                                                          :.for formating
    print('num1 is {0:.3} and num2 is {1:.3}'.format(8.342342423, 10.42342422)) so now the o/p is num1 is 8.34 and num2 is 10.4
    
   - we can do the same for the characters:->
    print('num1 is {0:.3} and num2 is {1:.3}'.format('Sadanand', 'Sharma')) o/p is num1 is Sad and num2 is Sha
    
   - Now suppose we want the 3 decimal no. format then we use 'f' after the 3 like this
    print('num1 is {0:.3f} and num2 is {1:.3f}'.format(8.342342423, 10.42342422)) o/p is num1 is 8.342 and num2 is 10.423

   - another way is to use the F-Strings
     So if we have num1 = 8.342342423 and num2 = 10.42342422
     print(f'num1 is {num1:.3f} and num2 is {num2:.3f}') # here instead of using format() we include f in the starting of the
     string
   
Note -> this format() could be used only with 'print' not with others such as 'subprocess.call()' <- Not sure

Note -> better to use '+' instead of ',' in 'print' as the single quotes not appear in the output with '+'
        Ex -> print("Changing MAC address from " + interface + " to ")
        
- Standard Inputs ->
  - we use # for comments
  - input('Enter the name ?') and when we run the prgm then the python ask me for input by displaying msg as 'Enter the name ?'
  - in python 3 use input() and in python 2 use raw_input()
  - print('Sadanand') // this will give output as Sadanand on the console
  - radius = input('Enter the radius') o/p would be a string not a number we can convert it into integer by method int(radius)
    this is called typecasting
    
Note -> It is easy to exploit the inputs such as in following code ->
    interface = input("Enter the interface > ")
    subprocess.call("ifconfig " + interface + " down", shell=True)

  // the user can input -> eth0;ls; instead of the input -> eth0
  // So it's important to handle the User input for the 'subprocess.call()' we use it this another syntax mentioned in docs ->
  // subprocess.call(["ls","-l"])  // here we r spliting the cmd in number of elments inside a list, So this way the python
  // will know that the 1st argument is the cmd and the other arguments r the options or part of the cmd
  // Hence the code -> subprocess.call("ifconfig " + interface + " down", shell=True)  will change to
  // subprocess.call(["ifconfig",interface,"down"])   // now the input -> eth0;ls; will give an error and not allow the
  // attacker to hijack the flow of the prgm and our subprocess.call() become more safe

- Command Line Arguments -> To get the input from cmd line 

Syntax ->
import optparse

parser = optparse.OptionParser()  # here we r creating the instance of the class OptionParser
parser.add_option("-i", "--interface", dest="interface", help="Interface to change MAC address")     
# 1st arg to be expected by the user here we r saying that the user can enter value with '-i' or '--interface' and
# it will be stored in the variable 'instance' and we r also giving the 'help' msg for the argument
(options, arguments) = parser.parse_args()     # to see the arguments to be used in prgm on the terminal with --help
# and it is also taking the input from cmd line into two sets of options and arguments and hence we r taking returned
# response in two variables 'options' and 'arguments' by -> (options, arguments) = parser.parse_args()
# Hence in the 'options' variables it will contained the inputs and in the 'arguments' varaible it will contain args
# such as --interface and --mac

Now on Doing -> python file_name.py --help  // it will show the arguments could be used and display options or arguments could
                                            // be used with prgm
Now on Doing -> python file_name.py --interface eth0 // now we r giving the input through cmd line

Note ->  methods or things which start with capital letters in python means that it is a Class
  
Note -> Use 'ctrl + d' for copying the line to next line by placing the cursor at the end of line which u wants to copy

- Functions ->
      def greet():                # here def is for define
         print('hello world')
      
      greet()
      
      - pass arguments
      
      def greet(name):                
         print('hello',name)
      
      greet('Sadanand')
      
      - default parmaters
      
      def greet(name='Sadanand'):     # this is default parameter now even if the argument is not passed the in greet() the name
                                      # will get a default value but if we had passed an argument it would take the passed value  
         print('hello',name)
      
      greet()
      
      - returning a value from function
        
      def greet(a):                
         return a * a         # returning the o/p
      
      value = greet(2)
      
      - to return multiple values from function
      
      def greet(a):                
         return a * a, a         # returning the o/p
      
      value, input = greet(2)
      
      - passing functions into functions as parameter
      
      def area(radius):
        return 3.14 * radius * radius
        
      def vol(area, length):
        print(area, length)
        
      vol(area(5),3)        # passing the area() into vol()

- If statements
      Ex- if age < 10:      # here : at the end of 10 is representing end of expression
            # ur code
          elif age < 40:    # it is same like else if
            # ur code
            break           # use of break keyword
          else:
            # ur code
            
- Regex -> Go the website -> https://pythex.org/ , here in the "Your test String" textbox paste all the string for which u
           wants to make regex logic and with the help of "Regular expression cheatsheet" in the website try to make ur regex
           expression
       Syntax -> import re
                 result = re.search(r"regex_pattern_string", variable_having_the_text)
                 print(result.group(0))  // group(0) here repesents the first output as their could be multiple strings
                                         // which could match the regex pattern, '0' denotes the first match
            
 - Reading output returned by System commands
  Syntax for cmd -> subprocess.check_output(args,*,stdin=None,stderr=None,shell=False,universal_newlines=False)
  ifconfig_result = subprocess.check_output(["ifconfig",interface])   # it returns the output of system cmds 
  print('ifconfig_Result > ',ifconfig_result)
  
- Python Prgm for MAC changer ->

#! usr/bin/env python3

# subprocess module contains a number of functions, these functions allow us to execute any system commands not just
# only linux cmds, cmds depend on the OS which executes the script
# Syntax -> import subprocess
#           subprocess.call("COMMAND",Shell=True)

# subprocess.call(args, *, stdin=None, stdout=None, stderr=None, shell=False) // this function allows us to run system
# cmds but runs the cmd in the foreground not in the background, doesn't run it in different thread and wait for the cmd
# to finish executing before moving to the next line
# Foreground contains the application the user is working on

import subprocess
import optparse

def get_arguments():
    parser = optparse.OptionParser()  # here we r creating the instance of the class OptionParser
    parser.add_option("-i", "--interface", dest="interface", help="Interface to change MAC address")
    parser.add_option("-m", "--mac", dest="new_mac", help="New MAC address")
    # 1st arg to be expected by the user here we r saying that the user can enter value with '-i' or '--interface' and
    # it will be stored in the variable 'instance' and we r also giving the 'help' msg for the argument
    (options, arguments) = parser.parse_args()  # to see the arguments to be used in prgm on the terminal with --help
    # and it is also taking the input from cmd line into two sets of options and arguments and hence we r taking returned
    # response in two variables 'options' and 'arguments' by -> (options, arguments) = parser.parse_args()
    # Hence in the 'options' variables it will contained the inputs and in the 'arguments' varaible it will contain args
    # such as --interface and --mac

    # interface = input("Enter the interface > ")    # we replace this code with below line code now
    interface = options.interface  # we r taking the value entered through cmd line
    # new_mac = input("Enter the new MAC address > ")   # we replace this code with below line code now
    new_mac = options.new_mac  # we r taking the value entered through cmd line
    
    if not interface:
        parser.error("[-] Plz specify the interface use --help for info")  # this will display the msg and exit the prgm
    elif not new_mac:
        parser.error("[-] Plz specify the NEW MAC use --help for info")
    return interface, new_mac   # If above two conditions doesn't execute then this code will 


def change_mac(interface, new_mac):
    print("[+] Changing MAC address for " + interface + " to " + new_mac)

    subprocess.call(["ifconfig", interface, "down"])
    subprocess.call(["ifconfig", interface, "hw", "ether", new_mac])
    subprocess.call(["ifconfig", interface, "up"])
    subprocess.call("ifconfig", shell=True)  # to list all the interfaces

interface, new_mac = get_arguments()
change_mac(interface, new_mac)
#! usr/bin/env python3

# subprocess module contains a number of functions, these functions allow us to execute any system commands not just
# only linux cmds, cmds depend on the OS which executes the script
# Syntax -> import subprocess
#           subprocess.call("COMMAND",Shell=True)

# subprocess.call(args, *, stdin=None, stdout=None, stderr=None, shell=False) // this function allows us to run system
# cmds but runs the cmd in the foreground not in the background, doesn't run it in different thread and wait for the cmd
# to finish executing before moving to the next line
# Foreground contains the application the user is working on

import subprocess
import optparse
import re

def get_arguments():
    parser = optparse.OptionParser()  # here we r creating the instance of the class OptionParser
    parser.add_option("-i", "--interface", dest="interface", help="Interface to change MAC address")
    parser.add_option("-m", "--mac", dest="new_mac", help="New MAC address")
    # 1st arg to be expected by the user here we r saying that the user can enter value with '-i' or '--interface' and
    # it will be stored in the variable 'instance' and we r also giving the 'help' msg for the argument
    (options, arguments) = parser.parse_args()  # to see the arguments to be used in prgm on the terminal with --help
    # and it is also taking the input from cmd line into two sets of options and arguments and hence we r taking returned
    # response in two variables 'options' and 'arguments' by -> (options, arguments) = parser.parse_args()
    # Hence in the 'options' variables it will contained the inputs and in the 'arguments' varaible it will contain args
    # such as --interface and --mac

    # interface = input("Enter the interface > ")    # we replace this code with below line code now
    interface = options.interface  # we r taking the value entered through cmd line
    # new_mac = input("Enter the new MAC address > ")   # we replace this code with below line code now
    new_mac = options.new_mac  # we r taking the value entered through cmd line

    if not interface:
        parser.error("[-] Plz specify the interface use --help for info")  # this will display the msg and exit the prgm
    elif not new_mac:
        parser.error("[-] Plz specify the NEW MAC use --help for info")
    return interface, new_mac   # If above two conditions doesn't execute then this code will


def change_mac(interface, new_mac):
    print("[+] Changing MAC address for " + interface + " to " + new_mac)

    subprocess.call(["ifconfig", interface, "down"])
    subprocess.call(["ifconfig", interface, "hw", "ether", new_mac])
    subprocess.call(["ifconfig", interface, "up"])
    subprocess.call("ifconfig", shell=True)  # to list all the interfaces
    
    
def get_current_mac(interface):
    ifconfig_result = subprocess.check_output(["ifconfig", interface])
    print('ifconfig_Result > ', ifconfig_result)

    mac_address_search_result = re.search(r"\w\w:\w\w:\w\w:\w\w:\w\w:\w\w", ifconfig_result)
    if mac_address_search_result:
        return mac_address_search_result.group(0)
    else:
        print("[-] Could not read MAC address")     # this will return 'None' as we r not returning anything
        

interface, new_mac = get_arguments()
current_mac = get_current_mac(interface)
print("Current MAC = ",str(current_mac))
change_mac(interface, new_mac)

current_mac = get_current_mac(interface)        # this is to get the new current MAC
if current_mac == new_mac:
    print("[+] MAC address was successfully changed to ", current_mac)
else:
    print("[-] MAC address didnot get changed")
    

- Netwrok Scanner Objectives ->
  - Discover all devices on the netwrok
  - Display their IP address
  - Display their MAC address
  
- Using netdiscover in kali linux to discover all devices connected to the netwrok ->
  - netdiscover -r ip_range_to_search_for  // syntax for netdiscover , it works same for the virtual netwrok and real wifi
    netwrok, here we need to provide the ip_range that is accessed by me and here the subnet range is-> 10.0.2.0 - 10.0.2.254
    hence cmd is -> netdiscover -r 10.0.2.1/24  // here the range is from 10.0.2.1 to 10.0.2.254
    
Note -> U cannot access the virtual netwrok wireless card from a virtual machine, here we r going to use the virtual wireless
adapter but for the real attacks on the network u need real wireless adapter

Note -> Wireless adapter is a device that is connected to ur computer through a USB port and it allows u to communicate with
other devices of a wifi, the wireless apadtors r built in laptops(Wireless Cards) now days but their r 2 problems to it ->
  1-> U cann't access wireless built in adaptors(Wireless cards) through kali if it is installed as virtual machine
  2-> Most built-in wireless cards r not good for hacking bcz they doesn't support monitor mode or packet injection
  
Wireless chipset -> it is used inside the wireless adaptor, chipset is kind of the brains inside the wireless adaptor and does
all the processing and calculations and this chipset determines whether this adaptor is gud or not

the "Atheros AR9271 2.4 Ghz USB WiFi Wireless Adapter" is a gud adaptor but it supports only 2.4ghz, so if ur target network 
uses the 5ghz or some the devices r connected over 5ghz then u won't be able to communicate with these devices
  
- Some routers have the band of 2.4ghz and 5 ghz both bcz Exlained -> A frequency band is how a wireless data is transmitted
between devices, these bands r radio waves that carry the data and these bands r their 2.4ghz and 5ghz, 2.4ghz is the common
frequency and these r single band routers and the routers with both 2.4ghz and 5ghz are known as dual band routers
the 2.4ghz is the standard band but it is not just only used in routers it is used in bluetooth devices, wireless cameras
, cordless phones and this bcz problem as other devices uses the same band the signal became over crowded and causes lot of
interference with wifi signals and it then slows down the wifi netwrok speed and sometimes loses connection

Another reason why 2.4 ghz is vulnerable to interference is bcz of the difference in wireless channel, a wireless channel is
just a way to fine tune and alter a frequency, sometimes u need switch to different channel if u r experiencing interference
from different wireless devices
The 2.4ghz band has 11 channels but all these 11 channels only 3 r non overlapping and 5ghz band has 25 non overlapping
channels
The 2.4 ghz band is slower then the 5ghz but it has longer range then the 5ghz, bcz 5ghz has higher frequency has difficulty
in pentrating objects such as floors and walls etc

ARP -> To communicate with another machine on another network we need to know it's MAC address, So the attacker device will use
a protocol ARP which allows us to link IP addresses to MAC addresses, So it sends a broadcast msg which is an ARP request to a
specific known MAC address in the whole netwrok and it is known as the broadcast MAC address, when a packet is set to be sent to
broadcast MAC address all clients in the same network recives this packet now all the devices will ignore this packet except
the one device who as the IP address which is sent in the request, now this device will respond by sending the ARP response to
the attacker with his MAC address and now the communication is setup among both the devices, So all this communication is done
using ARP protocol.


-------------------------------------------------------------------------------------------------------------------------

1https://www.youtube.com/watch?v=Ozrduu2W9B8&list=PL4cUxeGkcC9idu6GZ8EU_5B6WpKTdYZbK

- Every thing in python is considered objects, and objects r attributes of functions
- Numbers->
  - their r 2 two types of no. integer and float
  - type(object) # to find the type of an object
  - in python 5 / 5 = 1.0 # this is only for division
  - to get the integer value at the time if division do: 5 // 5 = 1 # we use double forward slash
  - power of operation is done as 5 ** 2 = 25
  - in python we use the order of calculation as BIDMAS # I here stands for indeces which anything like power off such as **

- Strings->
  - 'he's a mad man' # this will give an error as if u start with single quote then it should end with single quote
  - So "he's a mad man" # this is correct
  - otherway 'he\'s a mad man' # we use \ to escape a character here we have used to escape ' after he
  - greet = 'hello'
    So greet[3] o/p is 'l' same as JavaScript
    greet[-1] o/p is 'o' the python works backward also but Javascript does not 
    So greet[-5] o/p is 'h'
    but greet[-6] will give us IndexError: string index out of range
  - Slicing : greet[0:3] o/p is 'hel'
   greet[-1:2] o/p is empty string bcz we can only go forward not backward
   So we can do greet[2:-1] o/p is 'll'
  - repeating a string if we do: greet * 2 o/p is 'hellohello'
  - greet.upper() # for upper case
  - name = "aaa, bbb, ccc"
     name.split(',') o/p is ['aaa', ' bbb', ' ccc'] it split the string when ever it find ',' and convert it into list
  - len(greet) o/p is 5  # to find the length of string

- Lists ->
  - In python array is called List
  - fib1 = [1,2,3]
  -  fib1[1] o/p is 2
  -  fib1[-1] o/p is 3
  -  fib1[0:2] o/p is [1,2]
  -  fib2 = [4,5,6]
   - fib1 + fib2 o/p is [1,2,3,4,5,6]
   - fib1.append(7) o/p is [1,2,3,7] # it works same as push() in JavaScript
   - fib1.pop() o/p is 7 as it removed the last element and now if we do fib1 then o/p is [1,2,3]
   - fib1.remove(2) o/p is [1,3] but their is problem suppose we have array as fib1 = [1,2,2,3] and  then we do fib1.remove(2) so it only 
   remove one '2' and it removes the first '2' means the 2 of index 1.
   - fib1 = [1,2,3] and we do del(fib1[2]) then o/p is [1,2]
   - list of different datatypes is also allowed as fib1 = ['a','b',1,2] is ok to do
   - nested lists ,so fib1 = [1,2,3] and we can do fib2 = ['a','b', fib1, [4,5]] is ok and this would be shown as
      ['a', 'b', [1, 2, 3], [4, 5]]
      So if we do fib2[0] o/p is 'a' and if we do fib2[2] o/p is [1,2,3]
      if we do fib2[2][1] o/p is 2

            
   - For Loops
      ninjas = ['ryu', 'crystal' ,'yoshi', 'ken']
      
      for ninja in ninjas:
        print(ninja)        # prints all the elements
        
      for ninja in ninjas[1:3]:         # here we r slicing the array
        print(ninja)        
        # o/p will be 
        crystal
        yoshi
      
   - While Loops 
        
        age = 25
        num = 0
        
        while num < age:        
          # block of code    
          # break           # to break the loop
          # continue        # to go to he next iteration with proceeding further
          num += 1
          
    - Range -> range just creates a list of no.s till the no.s defined in it
        
        for n in range(5):
          print(n)      o/p -> 0 1 2 3 4
          
       we can define a starting point too such as
       
        for n in range(3,5):
          print(n)      o/p -> 3 4
          
       we can define the values with it can increase such as in above ex's it is increasing by one be can it also increase by 2
       
       for n in range(0,20,4):      # here 3rd argument is telling the updation by value
          print(n)      o/p -> 0 4 8 12 16
          
       we can use ranges with lists also
       
       alph = ['a','b','c','d','e']
       
       for n in range(len(alph)):
        print(n, alph[n])    
        
        o/p -> 0 a
              1 b
              2 c
              3 d
              4 e
              
        we can go backwards through the list also
        
        
       alph = ['a','b','c','d','e']
       
       for n in range(len(alph)-1,-1,-1):         # here in 3rd arg we put -1 bcz we need to go back and in 1st arg we r starting with 
        print(n, alph[n])                         # last element 'e' and 2nd argument is referring to 'e' as index -1 but we have to 'a'
                                                  # as the index their is not included that's why we are entering -1 which is index of 'e'        
        o/p -> 4 e                                # and this way the 'a' will also be get included
              3 d
              2 c
              1 b
              0 a
              

    
    - Dictionaries -> These r same as JSON objects in JavaScript and values r stored in them in key value pairs
        Ex: ninja_belt = {
          'crystal': 'red',
          'ryu': 'black'
        }
        
        ninja_belt['crystal']  o/p is red
        
        - to check if key is in dictionary or not:
        
        'crystal' in ninja_belt  o/p True
        
        - to know the keys in a dictionary
        
        ninja_belt.keys()  o/p is  dict_keys(['crystal','ryu']) # here dict_keys is a predefined variable containing all keys 
      
        - to only get above o/p in array format we can do type cast with 'list'
        
        list(ninja_belt.keys())   o/p is ['crystal','ryu']
        
        - now we wanna know all the values in a Dictionary then we can do
        
        ninja_belt.values()  o/p is  dict_values(['red','black']) # here dict_values is a predefined variable containing all values
        
        - we can do the same list type cast over on values
        
        list(ninja_belt.values())   o/p is ['red','black']

        - we can check how many instances of a particular values is in dictionary
        
        vals = list(ninja_belt.values())   o/p is ['red','black']
        
        vals.count('black')   o/p 1
        
        - if we use a value which does not exit then we will get o/p 0
        
        vals.count('blue')   o/p 0
        
        - we can also add the key and value to a already defined dictionary as
        
        ninja_belt['yoshi'] = 'blue'
        
        ninja_belt   o/p  ninja_belt = {
                            'crystal': 'red',
                            'ryu': 'black',
                            'yoshi': 'blue'
                          }
                          
         - another way to define a dictionary
         
         person = dict(name='Sadanand',age=25,height='6ft')
         
         person o/p       person = {
                            'name': 'Sadanand',
                            'age': 25,
                            'height': '6ft'
                          }
                          
         - for loop for dictionary
         
         for key, val in dictionary.items():
            print(key , val)
            
    - Sorting and Sets -> 
      
      nums = [1,4,2,3,3,2,4,5,5]
      
      to sort them we use sorted() as sorted(nums) 
      we can use these of strings list too as alphs = [d,g,A,h,B,a]
      sorted(alphs) o/p [A,B,a,d,g,h]  # here 'a' comes after 'B' bcz in python capital letters comes first
      
      set() is used to remove the duplicate data

      as set(nums) o/p [1,4,2,3,5]  # and set does not preserve order in alphabets but order is preserved in numbers 
      
      - we can apply set on dictionary also
      
      ninja_belt = {
                    'crystal': 'red',
                    'ryu': 'black',
                    'yoshi': 'black'
                  }
      
      set(ninja_belt.values()) o/p is {'red','black'}
      
  ---------------------------------------------------------------------------------------------------------------

    
    
