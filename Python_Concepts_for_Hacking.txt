- Udemy Tutorial For below Concepts -> 
  https://www.udemy.com/learn-python-and-ethical-hacking-from-scratch/learn/v4/t/lecture/9194564?start=0
  
- print("String to Print on Console") and print "String to Print"   // both gives same output 
 
- In the 'opt' directory of linux machine u r supposed to put all ur optional programs such as pycharm editor could be put in
   this directory 

- MAC(Media Access Control) address is permanent, physical and unique address which is assigned to network interfaces by 
  manufacturer , IP address is used in the internet to identify computers and communicate between devices on the internet,
  while the MAC address is used within the network to indentify devices and transfer data between devices.
  So each pack of data which is send within the network contains the source MAC and the destination MAC.
  
- Changing MAC address provides us ->
  - Anonymity
  - Impersonate other devices
  - Bypass filters
  - or connect to network which only specific devices and specific MAC addresses r allowed to connect
  
- use cmd -> ifconfig // to list interfaces on the current computer, interface here means a network card
- The interfaces created in virtual machines r virtual interfaces bcz we set this machine to use NAT network
  'lo' is the virtual interface created by linux, 'wlan0' is the external USB wireless adapter, 'ether' in the 'eth0' here
  represents the MAC address
  
- ifconfig eth0 down // to disable the interface
- ifconfig eth0 hw ether 00:11:22:33:44:55    // To change the MAC address to address -> 00:11:22:33:44:55
- ifconfig eth0 up    // to enable the interface

- always check the main python documentation for the module such as subprocess to know more functionalities of the module

- Variable Scopes ->
      
      my_name = 'ryu'       # Global Scope Variable
      
      def print_name():
        my_age = 8          # local scope variable
        print('Name is',my_name,my_age)   # here my_name and my_age both r accessible
        
      print_name()
      print('Name is',my_name,my_age) # here my_name is accessible but my_age is not accessible
      
      - Overwriting Variable
      
      my_name = 'ryu'       # Global Scope Variable
      
      def print_name():
        my_name = 'abc'          # overwriting global scope variable
        print('Name is',my_name)   # here o/p is abc
        
      print_name()
      print('Name is',my_name) # here o/p is ryu
      
      - to override variables globally
      
      my_name = 'ryu'       # Global Scope Variable
      
      def print_name():
        global my_name        # use global if u wants the variable to be override globally
        my_name = 'abc'          
        print('Name is',my_name)   # here o/p is abc
        
      print_name()
      print('Name is',my_name) # here o/p is abc
      
- to print the variable value with the string we can do as ->
  num = 3
  print('{} is the number').format(num)

- String Formating
   - print('num1 is {} and num2 is {}'.format(8,10)) then o/p is: num1 is 8 and num2 is 10
   - if we do: print('num1 is {1} and num2 is {0}'.format(8, 10)) then o/p is: num1 is 10 and num2 is 8 // here we have changed
     the indexing values of values passed in format() for the string in 'print' as now we are calling value of index 1 first
     and index 0 last
   - if we want to limit the character or no. for the output such as
    print('num1 is {0} and num2 is {1}'.format(8.342342423, 10.42342422)) //for this we want the only 3 digits value then we use
                                                                          :.for formating
    print('num1 is {0:.3} and num2 is {1:.3}'.format(8.342342423, 10.42342422)) so now the o/p is num1 is 8.34 and num2 is 10.4
    
   - we can do the same for the characters:->
    print('num1 is {0:.3} and num2 is {1:.3}'.format('Sadanand', 'Sharma')) o/p is num1 is Sad and num2 is Sha
    
   - Now suppose we want the 3 decimal no. format then we use 'f' after the 3 like this
    print('num1 is {0:.3f} and num2 is {1:.3f}'.format(8.342342423, 10.42342422)) o/p is num1 is 8.342 and num2 is 10.423

   - another way is to use the F-Strings
     So if we have num1 = 8.342342423 and num2 = 10.42342422
     print(f'num1 is {num1:.3f} and num2 is {num2:.3f}') # here instead of using format() we include f in the starting of the
     string
   
Note -> this format() could be used only with 'print' not with others such as 'subprocess.call()' <- Not sure

Note -> better to use '+' instead of ',' in 'print' as the single quotes not appear in the output with '+'
        Ex -> print("Changing MAC address from " + interface + " to ")
        
- Standard Inputs ->
  - we use # for comments
  - input('Enter the name ?') and when we run the prgm then the python ask me for input by displaying msg as 'Enter the name ?'
  - in python 3 use input() and in python 2 use raw_input()
  - print('Sadanand') // this will give output as Sadanand on the console
  - radius = input('Enter the radius') o/p would be a string not a number we can convert it into integer by method int(radius)
    this is called typecasting
    
Note -> It is easy to exploit the inputs such as in following code ->
    interface = input("Enter the interface > ")
    subprocess.call("ifconfig " + interface + " down", shell=True)

  // the user can input -> eth0;ls; instead of the input -> eth0
  // So it's important to handle the User input for the 'subprocess.call()' we use it this another syntax mentioned in docs ->
  // subprocess.call(["ls","-l"])  // here we r spliting the cmd in number of elments inside a list, So this way the python
  // will know that the 1st argument is the cmd and the other arguments r the options or part of the cmd
  // Hence the code -> subprocess.call("ifconfig " + interface + " down", shell=True)  will change to
  // subprocess.call(["ifconfig",interface,"down"])   // now the input -> eth0;ls; will give an error and not allow the
  // attacker to hijack the flow of the prgm and our subprocess.call() become more safe

- Command Line Arguments -> To get the input from cmd line 

Syntax ->
import optparse

parser = optparse.OptionParser()  # here we r creating the instance of the class OptionParser
parser.add_option("-i", "--interface", dest="interface", help="Interface to change MAC address")     
# 1st arg to be expected by the user here we r saying that the user can enter value with '-i' or '--interface' and
# it will be stored in the variable 'instance' and we r also giving the 'help' msg for the argument
(options, arguments) = parser.parse_args()     # to see the arguments to be used in prgm on the terminal with --help
# and it is also taking the input from cmd line into two sets of options and arguments and hence we r taking returned
# response in two variables 'options' and 'arguments' by -> (options, arguments) = parser.parse_args()
# Hence in the 'options' variables it will contained the inputs and in the 'arguments' varaible it will contain args
# such as --interface and --mac

Now on Doing -> python file_name.py --help  // it will show the arguments could be used and display options or arguments could
                                            // be used with prgm
Now on Doing -> python file_name.py --interface eth0 // now we r giving the input through cmd line

Note ->  methods or things which start with capital letters in python means that it is a Class
  
Note -> Use 'ctrl + d' for copying the line to next line by placing the cursor at the end of line which u wants to copy

- Functions ->
      def greet():                # here def is for define
         print('hello world')
      
      greet()
      
      - pass arguments
      
      def greet(name):                
         print('hello',name)
      
      greet('Sadanand')
      
      - default parmaters
      
      def greet(name='Sadanand'):     # this is default parameter now even if the argument is not passed the in greet() the name
                                      # will get a default value but if we had passed an argument it would take the passed value  
         print('hello',name)
      
      greet()
      
      - returning a value from function
        
      def greet(a):                
         return a * a         # returning the o/p
      
      value = greet(2)
      
      - to return multiple values from function
      
      def greet(a):                
         return a * a, a         # returning the o/p
      
      value, input = greet(2)
      
      - passing functions into functions as parameter
      
      def area(radius):
        return 3.14 * radius * radius
        
      def vol(area, length):
        print(area, length)
        
      vol(area(5),3)        # passing the area() into vol()

- If statements
      Ex- if age < 10:      # here : at the end of 10 is representing end of expression
            # ur code
          elif age < 40:    # it is same like else if
            # ur code
            break           # use of break keyword
          else:
            # ur code
            
 - Reading output returned by System commands
  Syntax for cmd -> subprocess.check_output(args,*,stdin=None,stderr=None,shell=False,universal_newlines=False)
  ifconfig_result = subprocess.check_output(["ifconfig",interface])   # it returns the output of system cmds 
  print('ifconfig_Result > ',ifconfig_result)
  
- Python Prgm for MAC changer ->
#! usr/bin/env python3

# subprocess module contains a number of functions, these functions allow us to execute any system commands not just
# only linux cmds, cmds depend on the OS which executes the script
# Syntax -> import subprocess
#           subprocess.call("COMMAND",Shell=True)

# subprocess.call(args, *, stdin=None, stdout=None, stderr=None, shell=False) // this function allows us to run system
# cmds but runs the cmd in the foreground not in the background, doesn't run it in different thread and wait for the cmd
# to finish executing before moving to the next line
# Foreground contains the application the user is working on
import subprocess
import optparse

def get_arguments():
    parser = optparse.OptionParser()  # here we r creating the instance of the class OptionParser
    parser.add_option("-i", "--interface", dest="interface", help="Interface to change MAC address")
    parser.add_option("-m", "--mac", dest="new_mac", help="New MAC address")
    # 1st arg to be expected by the user here we r saying that the user can enter value with '-i' or '--interface' and
    # it will be stored in the variable 'instance' and we r also giving the 'help' msg for the argument
    (options, arguments) = parser.parse_args()  # to see the arguments to be used in prgm on the terminal with --help
    # and it is also taking the input from cmd line into two sets of options and arguments and hence we r taking returned
    # response in two variables 'options' and 'arguments' by -> (options, arguments) = parser.parse_args()
    # Hence in the 'options' variables it will contained the inputs and in the 'arguments' varaible it will contain args
    # such as --interface and --mac

    # interface = input("Enter the interface > ")    # we replace this code with below line code now
    interface = options.interface  # we r taking the value entered through cmd line
    # new_mac = input("Enter the new MAC address > ")   # we replace this code with below line code now
    new_mac = options.new_mac  # we r taking the value entered through cmd line
    
    if not interface:
        parser.error("[-] Plz specify the interface use --help for info")  # this will display the msg and exit the prgm
    elif not new_mac:
        parser.error("[-] Plz specify the NEW MAC use --help for info")
    return interface, new_mac   # If above two conditions doesn't execute then this code will 


def change_mac(interface, new_mac):
    print("[+] Changing MAC address for " + interface + " to " + new_mac)

    subprocess.call(["ifconfig", interface, "down"])
    subprocess.call(["ifconfig", interface, "hw", "ether", new_mac])
    subprocess.call(["ifconfig", interface, "up"])
    subprocess.call("ifconfig", shell=True)  # to list all the interfaces

interface, new_mac = get_arguments()
change_mac(interface, new_mac)
