- All Kali linux cmds -> https://techlog360.com/a-z-kali-linux-commands/
- Udemy Tutorial For below cmds -> https://www.udemy.com/linux-command-line-tutorial-for-beginners/learn/v4/t/lecture/6347292?start=0

- Linux -> Shell is a program that takes cmds from the keyboard and gives them to the OS to perform.
Terminal is a tool that is used to pass your shell cmds,This is a program that opens window and lets u interact with the shell.

- Every Linux OS has root folder underwhich all the files resides such as Downloads, Documents etc


- pwd       // This cmd shows the current working directory


- cd        // To navigate to root directory which contains Documents, Downloads etc)
- cd /      // To go back to first directory which contains folders like root, home, opt , sys, var, tmp etc
- cd ~      // To navigate to root directory which contains Documents, Downloads etc)
- Directories or Folders which have space in them such as "My Folder" cannot be directly navigated by 'cd' So we can do
    - cd My\ Folder (to go in "My Folder" directory)
    - cd "My Folder"
    - cd 'My Folder'


- ls        // To list the files present in directory)
- ls option_cmd directory_name      // syntax for ls cmd
- ls Documents          // this will list all the files which r in Documents directory
- ls /                  // to list all the things in first directory
- ls ~                  // to list all the things in root directory
- ls ..                 // to list things one step or directory which was previously
- ls ../..              // to list things two directories back
- ls -l                 //to show the more info and detailed things about directories of files present)
- ls -a                 // this will list the hidden files also
- ls -al                // this will show the hidden files and the details about all files
- ls -R                 // to see the whole directory structure with files in them hierchial wise
- ls -ld directory_name // to show full details of the directory
- ls /home/             // to know the users and their directory
- ls -lS                // to list and sort directories and files by size
- ls Documents/*.html   // this is to list all the files which have extension of html
- ls Documents/*.*      // this is to list all the files with all extension
- ls -lS > out.txt      // to overwrite all the contents to a file, here we r saving it in out.txt file which would be
                        // created if not present and if it is present it will overwrite all the previous data
- ls -d */              // to list all the directories


- if u do cmd -> ls -l     // then u will see as o/p -> -rw-rw-r-- 1 sadanand sadanand 22 Jul 23 18:55 test
- Here in the 1st '-' means it's a normal file, if it would be 'd' then it means it is a directory and if it is 'c' then it is
  character special file, if it is 'b' then it is binary special file
- First -rw here is for the owner of the file
- Second -rw means read and write for the group of the file and
- 3rd r-- is the permission for everybody else
- 4th '1' represents the symbolic links of the file
- 5th sadanand it is the name for the owner of the file
- 6th sadanand it is the name for the group of the file
- 7th '22' it is the size of the file
- 8th 'Jul 23 18:55' is the date on which it's created
- 9th 'test' is the file name
- rwx means the read, write and execute
- To change the permissions -> chmod o+x file_name  // Here 'o' stands for others '+' is for adding the permission and '-' is 
  for subtracting the permission and x is for executable, So permission for others has now executable permission
- same way -> chmod o+w file_name    // to set permissions for the others as writeable
- chmod g+x file_name    //  to set the executable permission for group
- chmod g-wx file_name   // to set the permissions for executable and write for the group
- chmod ug=rwx file_name // this will change the permissions for the owner and the group of the file together to read, write 
  and execute, '=rwx' and '+rwx' works same way
- chmod a-rwx file_name // we can use 'a' for all to set permissions for read, write and execute we could also use 
  'chmod ugo-rwx file_name' cmd
- chmod u+rw,g=rw,o+r file_name // this is for the setting seperate permissions for owner,group and others together
- chmod u-w directory_name   // to set the permissions for the owner for write in directory and lock symbol will appear on the
  directory on visual(graphical view) folder
- Note -> we can also revoke the permissions for executable from the directory, in which case the user cannot 'cd' into the
  directory

- Octal and Numerical Permissions -> Octal Permission is the numerical representation of the file permission,
 the octal representation for -> -rw-rw-r-- 1 sadanand sadanand 22 Jul 23 18:55 test as

 Users          Groups          Others
 r w x          r w x           r w x   // provide 1 for providing the permissions and 0 for not providing permissions
 1 1 1          1 0 1           0 0 0   // taking 1 1 1 for all if we r providing permissions for all which is binary value 
 4 2 1          4 0 1                   // 4 2 1 came in group as we take 1 for 'x' in Users then 'w' become 2 bcz as go from
                                        // right to left in binary the values doubles and for the same reason 'r' is 4
// now 4+2+1 = 7 so now if u wants the owner to read, write and execute the file then u need to give the no. notation 7
// now in groups if we doesn't wants to give the write permission to the group the denote 'w' as 0 as for the negative 
   permissions, 'r' and 'x' as 1 as for the positive permissions
// hence for groups the value notation will be 4+0+1 = 5, So when ever u wants to give only read and execute permission we can
use '5', So this way we can calculate the notations
// Hence to change permissions -> chmod 000 file_name  // so here we r saying that we r providing no permission for owner hence
0,no permission for group hence 0, no permission for others hence 0 So it becomes 000
// For owner to read,write,execute and for group it is only read and execute hence cmd -> chmod 750 file_name

- If the tab is not completing the script then check the permissions for the file whether it is read only by cmd->'ls -al'
  then do cmd -> 'chmod +x file_name' to do the executable permissions for owner, group and others all together
- To revert the permissions use cmd -> 'chmod -x file_name'


- cat options_cmd filename1 filename2 .... // syntax for cat
- cat               // this will allow u to write something on terminal and echo things u enter
- use ctrl+d to come out of 'cat' cmd
- cat file_name // to display contents of the file
- cat filename1 filename2 // this will combine and display the contents of two files
- cat -b filename // this will show contents with line no.'s except the blank lines they won't we numbered
- cat -n filename // this will show contents with line no.'s and also for the the blank lines
- cat -s filename // this squeses the extra blank line and only show data with one blank line between the contents
- cat -E filename // this adds a $ symbol at the end of each line

- I/O Redirection -> to capture output from one file or program and send it to another file and program
- output_cmd > file_name // syntax for redirection
- cat > file_name // to write something in the file, it will also create file if not created and data will we overwritten if it                
                  // already contains some data in it
- cat >> file_name // this will append the data with the previous data in the file not overwrite it
- cat filename1 filename2 > filename3 // this will add the data of filename1 and filename2 and store it in filename3
- cat filename1 >> filename2 // this will add the data of filename1 to filename2


- mkdir directory_name // to create the directory
- mkdir folder1/folder2  // this will create folder2 directory inside the existing directory folder1, folder1 should exists
                         // otherwise it give error     
- mkdir -p folder1/folder2 // to create the whole directory structure means for the all direcories and sub directories which
                           // does not exists will be created
- mkdir -p folder1/{folder2,folder3} // this will create two folders folder2 and folder3 inside folder1


- rmdir options directory_name      // syntax for rmdir
- rmdir directory_name              // to remove the directory
- rmdir folder1/folder2/folder3     // this will remove only folder3 from the directory structure
- rmdir -p folder1/folder2/folder3  // this will remove all the folders only their should not be any file present in any folder
- rmdir -pv folder1/folder2/folder3 // v is for verbose mode which dispalys extended information and this will remove all the
                                    // folders and show process step by step
- rm filename                       // to remove a file
- rm -r parent_directory_name       // this will remove the file and the directory's also


- cp options_cmd src des        // 'cp'is used as copy command 'src' is the source from which we wants to copy and 'des' is the
                                // destination where we wants to copy
- cp file1 file2                // this will copy data of file1 to file2 and create file2 if it does not exist
- cp file1 dir1                 // this will copy file1 to dir1 directory
- cp file1 file2 dir1           // this will copy file1 and file2 both to dir1 directory and if suppose file1 is already present
                                // in the directory then it will be overwritten by the new file
- cp -i file1 file2 dir1    // this will not let file1 to be overwritten in dir1 if it exists as it asks before overwritting
- cp ../file1 ../file2 .    // '.' here represents the destination directory which is current directory and the file1 and file
                            // will be copied to current directory, So use '.' if u r in that directory otherwise use some else
                            // path as u desrire for destination
- EX -> cp file1_path file2_path destination_directory_path
- cp dir1 dir2              // if dir2 doesn't exists then it will give error
- cp -R dir1 dir2           // using -R flag will now create dir2 directory and then copy the data of dir1 to dir2 but if dir2
                            // and files exists then it will copy the dir1 directory to dir2 also


- mv options_cmd src des // syntax for mv
- mv file1 file2 // this will move data and rename file and directories so here file1 will be renamed as file2 and if file2
                 //  doesn't exist it will be created
- mv file1 dir1 // this will move file1 to dir1 directory and if file1 exists then the data in it will be overwritten
- mv -i file1 dir1      // this will ask before overwriting file1 if it already exists in dir1
- mv dir1 dir2          // this will move dir1 to dir2 and if dir2 doesn't exist then dir2 will be created but in the case of
                        // non existing of the directory the dir1 will not be move to dir2 instead the contents of dir1 will be
                        // moved to dir2
- mv -v file1 dir1      // for the verbose mode


- 'less' cmd is used for reading the file or to search something inside the file,'less' is better then the cat cmd to read the 
  file contents as the size of the opened terminal window will not create any hurdle to display the data which was too big and
  we were not able to scroll further in terminal
- less filename     // to read the data form the file and scroll the content of file as u proceed by scrolling
    - press space after executing above cmd will dispaly the data on terminal page by page
    - press shift + B to go up the pages
    - press shift + G to go at end of the file
    - press g       // this go at the top of the file
    - /book         // this is search for the 'book' keyword in file and to go to next 'book' in file press 'n'
    - ?book         // to search for 'book' in file from down to up
    - press 'q' to quit from less
    
    
- 'touch' cmd is a way to create files in linux it is also used to change the timestamps on existing files and directories, u 
  cannot use 'touch' cmd to create directories
- touch filename                        //syntax to create a new file
- touch hello.sh  //.sh extention is not necessary but for editor it is usefull, it is also best practice to provide extension
- touch file1     // file1 should be already exist now the timestamp of the file would be the current time


- nano filename // this will create the file if not exists
- ctrl+o // to save the data in file and then press enter
- other common cmds which will be used in nano editor will be already listed at bottom of the editor


- 'sudo' cmd allows extra privilages as administrator or more then normal user
- 'sudo' infront of any cmd will enhance the privilage creteria for that cmd
- sudo -s       // this will give u the root user privilages which is super user mode


- 'top' cmd provides dynamic real time view of ur system, Suppose u wants to know which process in ur computer is taking most
of the CPU etc then use cmd -> top // a window will appear with data, Here PID -> Process ID, in linux every program and 
process has it's own ID, u can see CPU usage, Memory usage etc
- 'top' refreshes the data of process usage table in every 3 seconds bydeafult
- U can change the delay time from 3 seconds to other interval also by pressing 's' after 'top' cmd is executed
- To filter out ideal processes(processes u need not to know as they will always we running) press 'i'
- To kill any process press 'k' and then enter the 'pid' of the process


- pidof process_name // to find the pid of process


- kill -flags pid_of_process        // syntax for kill cmd
- kill pid_no                       // to kill the process
- kill -KILL pid_no                 // this will force kill only use when needed
- kill -9 pid_no                    // this also a kind of force kill but not as powerfull as -KILL


- ps -ux            // to get the long list of all running processes this is usefull in knowing the name of process or the
                    // process id of some process
- ps -aux           // the 'ps -ux' gives processes list for the current user only, to know all the processes by all users use
                    // 'ps -aux' cmd
- ps -U user_name   // this will give all the processes of the entered user
- ps -C name_of_process     // this will list out all the instances or processes which r related to process entered


- echo string or echo "string"          // to display the string it is best practice to use "" with string
- myvar="Sadanand"                      // This is variable initialization, don't provide space before and after '='
  echo $myvar                           // to display the value of 'myvar' variable
- echo "My name is $myvar"              // to use variable to display string
- echo -e 'Some \text'                  // here 't' of word 'text' will be escaped bcz we use -e, O/P -> Some ext
- echo -e 'Some \n text'  // o/p -> Some
                                    text
                                    
                                    
- which cmd is used to return the path name of a file or a command which we use with this 'which' cmd
- which ls //to know the location of the ls cmd
- In bash scripting it is gud practice to use the full path name as we should use -> '/bin/ls' instead of just 'ls' , bcz some
  OS recognize the 'ls' cmd and some will require u to enter the full path for the 'ls' cmd


- 'whatis' cmd will display short manual page discription for cmd -> whatis ls


- 'useradd' cmd is used to create a user
- sudo useradd user_name -m -s /bin/bash -g users -c "Coments"      // -m is going to create a default home directory for this
                                                                    // user, -s is used for allowing the user to use the shell
                                                                    // which we provide and here it is bash 
                                                                    // -g is the default user flag and user will be assigned to 
                                                                    // the group u mention , always use -g flag with the 'users'
                                                                    // group , -c flag is used for providing the comments
- ls /home/                 // to know the users
- 'passwd' cmd allows u to change the password for the user
- sudo passwd user_name // now u can change the password for the entered user


- 'userdel' cmd is used to delete the user
- sudo userdel user_name // it will delete the user but it will not delete the directory of the user which u can see by using          
  cmd -> ls /home/, Hence the user will be deleted but his data will not
- sudo userdel -r user_name   // this will delete the home directory also with the user
- sudo rm -r /home/mark/      // this will remove all the data of the user, So use it carefully


- groups                 // this will show u that to which groups ur current user is connected too.
- cat /etc/group         // to list all the groups which r available on ur OS
- sudo groupadd name_of_group           // to add the new group
- sudo groupdel name_of_group           // to delete the group
- sudo gpasswd -a user_name group_name  // assign user to a group
- sudo gpasswd -d user_name group_name // to remove user from the group


- .bashrc file is a script that is executed whenever a new terminal session is started in interactive mode
- when u do -> ls -a , in ur root directory u can see a file .bashrc in the list, whenever u open a new terminal this .bashrc
  file is executed
- nano .bashrc          // to see the contents of the file
- gedit .bashrc         // this will also open the file, gedit is also an notepad kind of editor
- In some linux systems this .bashrc file exists and in some not, if it is present then it is OK otherwise u can create ur own
- whatever u add in to the script of the bashrc file it will we executed first whenever u open a new terminal session
- Ex -> edit and add -> echo "This is test code" in the .bashrc file and the text will we displayed when ever u open terminal 
- or try adding code -> alias ls='ls --color=auto -l' in the .bashrc file and now when ever u will do 'ls' it will do 'ls -l'
  with the auto color. So here we changed the functionality of 'ls' cmd with 'ls -l'
- We generally use .bashrc file for setting up the environment variables such as for JAVA, or for git etc


Note -> If U get permission denied while listing of files with any command then use 'sudo' with that cmd


Free resources and Used Resources ->
- df        // this cmd reports the amount of Disk space being used and avilable by ur file system
- df -h     // displays the data in more human readable format
- du        // this cmd is used to estimate and display disk space used by files, navigate into the directory on which u wants
            // to use this cmd and in the last of all listing it will shoe u the size of the folder
- du -h     // displays the data in more human readable format
- du -sh    // '-s' is for summary , 'h' is for human redable, this will calculate the disk space and all of it used
- du -sh foler_name     // to know the details for the following folder
- free      // dispalys the total amount of free and used physical and swap memory in the system as well as the buffer used by
            // the kernel, the data associated by the title-> -/+ buffers/cache // displays the whole memory used by ur machine
- free -b   // 'b' is for byte we can also use 'k' in place of 'b', k is for kilobyte , 'm' is for megabyte, 'g' for gigbyte and
            // 't' for terabyte
            
            
- 'watch' cmd can run scripts or cmds at a regular interval or repeatedly 
- watch free -m         // and u will free after every 2 seconds the command is executed again and data is refreshed
- press ctrl + c        // to come come out of watch cmd
- watch -n no_of_seconds free -m    // u can enter the no of seconds to tell after what time interval the watch has to repeat
                                    // the cmd


- 'head' and 'tail' cmds generally we use them with files, So 'head' cmd could be used to output the first part of the file and  
  the 'tail' cmd could be used to output the last part of the file
- Bydefault 'head' will print first 10 lines and 'tail' will print last 10 cmds
- head file_name        // syntax for head
- tail file_name        // syntax for tail
- head -nNumber_of_lines file_name  // to give limit for the no. of lines to display, no space between -n and Number_of_lines
- tail -nNumber_of_lines file_name  // to give limit for the no. of lines to display
- head -Number_of_lines file_name   // works same as cmd -> head -nNumber_of_lines file_name 
- tail -f file_name         // this will print the last 10 lines but the terminal session for 'tail' would not be ended ,-f flag
                            // stands for follow, this would be helpfull when u input or output things   - (Not Clear)
- head file1 file2          // to see first 10 lines of multiple files
- head -Number_of_lines file1 file2     // to see first desired number of lines for multiple files


- find cmd is to search for files in the directory hierachy
- find directory_name_or_path -name file_name       // syntax for find cmd
- find directory_name_or_path -name file_name.*     // this will search for the file_name with all extensions
- find directory_name_or_path -name *.txt           // this will search for the files with extension txt
- find directory_name_or_path -name file_name*      // this will search for all files name file_name
- find / -name file_name                            // here we r starting search from root directory by giving '/'
- find location_to_search_in -mtime -1  // when u forgot the name of the file and the location of the file then use this cmd
                                        // as it will look in the suggested location and -mtime flag is used to set the time
                                        // period here we r using '-1' which means we r looking for file created 1 day ago to
                                        // till now and if u input '1' then it will only look for files created 1 day ago
                                        
                                        
- 'wc' cmd or wordcount prints a count of new lines, words and bytes for each input file
- wc file_name  // o/p -> 1 6 42 file_name , here ist param '1' represents the no. of lines in file, 2nd param '6' represents
                // the no. of words and 3rd param '42' represents the no. of characters in file and 4th is name of file
- wc -c file_name   // this will give the no. of bytes or no. of characters in file
- wc -l file_name   // this will give the no. of lines in file
- wc -w file_name   // this will give the no. of words in file
- wc -L file_name   // this will give the length of the longest line in file


- 'cal' cmd is used to display conventionally formated calender on cmd line
- cal       // it will display calender, we can also use cmd -> cal -1 // it will gave same output  
- ncal      // this will display calender in different format
- cal year_no       // it will display all the months for input year
- cal month_no year_no      // to display monthly calender for the input month and year
- cal -3            // this will o/p calender for current month, previous month and next month


- 'date' cmd is used to print or change the value of system time and date information
- date                  // it display current date and time
- date -s "11/20/2003 12:48:00"     // this will set the input time as the system time
- date +%d%h%y                      // this will specify the at current day,month and year, we can use them seperately also
                                    // like this date +%h, o/p -> 04Jan17
- date "+%d-%h-%y"                  // o/p -> 04-Jan-17
- man date                          // for more flags to be used with 'date' cmd


Run multiple cmds together -> we can use ';' for combining cmds
- ls ; pwd          // now the o/p would be combination of both cmds and they will be executed from left to right
- date ; CAL ; pwd  // here 'CAL' is a wrong cmd but still other cmds will be executed it will just gave the error for 2nd cmd
- ls && pwd         // we can use '&&' in place of ';' and gives the same output
- the only difference between ';' and '&&' is that the ';' will execute every cmd regardless of other cmds have been executed
  successfully of not but with '&&' if the previously executed cmd is failed it will not execute the other left cmds
- ls || pwd         // here it will give output for 'ls' only bcz here logical OR is applied as if any of the cmd is successful
                    // it will not execute other cmds


- apt-get is a cmd line tool used to work with apt(Advanced Packaging Tool) software packages
- sudo apt-get update       // it will resynchronize ur local package file and these package files r save in the location
                            // as -> /etc/apt/sources.list and all the repositories for package list r mentioned their
- sudo apt-get install package_name         // to install the package
- sudo apt-get remove package_name         // to uninstall the package but will not remove all the configuration from system
                                           // means the dependencies of the package
- sudo apt-get remove --purge package_name  // this will remove all the dependencies and files related to the package and
                                            // package itself
- sudo apt-get autoremove                   // when u wants to remove files and softwares which r not going to be used by their
                                            // parent software anymore, Use this cmd carefully and check the things getting
                                            // removed before executing it completely
                                            
                                            
- ifconfig              // to show ethernet settings and other internet config things, if 'eth0' is their in o/p then it means
                        // their is wired connection , if u see 'wlan0' then it is wireless connected, additional ethernet
                        // connections would be shown as 'eth1' and so on
                        // 'lo' is a loop back interface which is a special interface which system uses to communicate with
                        // itself, 'inet addr' is the local are LAN address, 'RX packets' is the received packet
                        // 'TX packet' is the transmitted packet
- ifconfig eth1         // it will now show details for 'eth1' interface only
- ifconfig eth0 up      // this will enable the internet connection
- ifconfig eth0 down    // this will disable the internet connection


- 'tar' cmd is used to create, maintain, modify and extract files which r archived in the tar(Tape Archive) format, tar is an
  archiving file format just like zip file
- tar -cvf        // 'c' for creating an archive, 'v' for verbose, 'f' allows u to specify the file name if it not used then
                  // linux is going to create a Zip file which is going to be system dependent and it's name is not defined
                  // by u
- tar -cvf  name_of_file_u_wants_to_give.tar file_name_which_has_to_be_compresed  // this will compress the file to tar, it's
                                                                                  // better to give .tar extension in the name
                                                                                  // for the file u r going to create
- tar -xvf  name_of_tar_file        // to will decompress the file
- tar -czvf name_of_file_u_wants_to_give.tar.gz file_name_which_has_to_be_compresed //here 'z' will create the file with gz
                                                                                    // format
- tar -xzvf file_name.tar.gz        // to decompress gz format file
